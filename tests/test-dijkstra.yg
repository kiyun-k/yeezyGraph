void dijkstra(graph<struct nodedata> g1, node<struct nodedata> source) {
	pqueue p;
	struct nodedata sourcedata;
	struct nodedata sourcedata2;
	node <struct nodedata> temp;
	node <struct nodedata> temp2;
	string tmpstring;
	list<string> listtemp; 
	int i;

	listtemp = new list<string>();
	p = new pqueue();
	tmpstring = "temporary string";

	/* set distance of source vertex to 0 */
	sourcedata = source@data;
	sourcedata~dist = 0;
	source.setData(sourcedata);
	p.p_push(source);

	prints("Vertex              Distance from source");
    while(p.p_size() != 0) {
		temp = p.p_delete();
		printstring(temp@name);
		printstring("                       ");
		sourcedata = temp@data;
		print(sourcedata~dist);
		temp.modifyVisited(true);
		listtemp = temp@outNodes;
		for (i = 0; i < listtemp.lsize(); i = i + 1) {
			tmpstring = listtemp.l_get(i);
			temp2 = g1~_tmpstring;
			sourcedata2 = temp2@data;
			if (temp2@visited == false) {
				if (sourcedata2~dist > sourcedata~dist + g1.weight(temp, temp2)) {
					sourcedata2~dist = sourcedata~dist + g1.weight(temp, temp2);
					temp2.setData(sourcedata2);
					p.p_push(temp2);
				}		
			}
			
		}
	}
	

}


struct nodedata {
	int dist;
	node<struct nodedata> parent;
}

int main() {
	
	list<string> listtemp; 
	list<string> listtemp2;
	/* create an undirected graph g1 */
	graph<struct nodedata> g1; 
	string a1;
	string a2;
	string a3;
	string a4;

	string stringtmp;

	int i;

	struct nodedata n1;
	struct nodedata n2;
	struct nodedata n3;
	struct nodedata n4;

	node<struct nodedata> a;
	node<struct nodedata> b;
	node<struct nodedata> c;
	node<struct nodedata> d;

	n1~dist = INFINITY;
	n2~dist = INFINITY;
	n3~dist = INFINITY;
	n4~dist = INFINITY;

	a1 = "a";
	a2 = "b";
	a3 = "c";
	a4 = "d";


	/* add nodes to g1 */
	g1 = new graph<struct nodedata>();
	g1~+a1; 
	g1~+a2;
	g1~+a3;
	g1~+a4;

	a = g1~_a1;
	b = g1~_a2;
	c = g1~_a3;
	d = g1~_a4;

	a.setData(n1); 
	g1[1]->(a, b); 
	g1[2]->(a, c);

	b.setData(n2); 
	g1[1]->(b, a);
	g1[10]->(b, d);

	c.setData(n3); 
	g1[2]->(c, a);
	g1[5]->(c, d);

	d.setData(n4); 
	g1[10]->(d, b);
	g1[5]->(d, c);

	dijkstra(g1, a);
	
	

}