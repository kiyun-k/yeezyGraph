### Starting build.
# Target: microc.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:ml, file:microc.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.bitreader -package llvm.analysis -package llvm -modules microc.ml > microc.ml.depends # cached
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.bitreader -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o ast.cmo ast.ml # cached
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.bitreader -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.bitreader -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o parser.cmi parser.mli # cached
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q scanner.mll # cached
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.bitreader -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends # cached
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:ml, file:semant.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.bitreader -package llvm.analysis -package llvm -modules semant.ml > semant.ml.depends # cached
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", line 205, characters 10-333:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(RemoveNode|AddEdge|RemoveEdge)
File "codegen.ml", line 26, characters 6-17:
Warning 26: unused variable node_module.
File "codegen.ml", line 105, characters 6-18:
Warning 26: unused variable removeNode_f.
File "codegen.ml", line 107, characters 6-15:
Warning 26: unused variable addEdge_f.
File "codegen.ml", line 109, characters 6-18:
Warning 26: unused variable removeEdge_f.
File "codegen.ml", line 167, characters 8-18:
Warning 26: unused variable idtostring.
# Target: scanner.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o semant.cmo semant.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o semant.cmo semant.ml
File "semant.ml", line 144, characters 19-3047:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
GraphOp (_, _, _)
# Target: microc.cmo, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), byte, compile, extension:cmo, extension:ml, file:microc.cmo, file:microc.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o microc.cmo microc.ml
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o ast.cmx ast.ml
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.bitreader -package llvm.analysis -package llvm -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), package(llvm.bitreader), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o parser.cmx parser.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm.bitreader -package llvm.analysis -package llvm -o parser.cmx parser.ml
File "parser.mly", line 158, characters 35-37:
Error: This expression has type string but an expression was expected of type
         Ast.expr
Command exited with code 2.
# Compilation unsuccessful.
